// Code generated by protoc-gen-go.
// source: greeter.proto
// DO NOT EDIT!

/*
Package greeter is a generated protocol buffer package.

It is generated from these files:
	greeter.proto

It has these top-level messages:
	Empty
	HelloRequest
	LogEntry
	HelloReply
*/
package greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LogEntry struct {
	Severity int32  `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	AppName  string `protobuf:"bytes,2,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Text     string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogEntry) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *LogEntry) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *LogEntry) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*LogEntry)(nil), "LogEntry")
	proto.RegisterType((*HelloReply)(nil), "HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	EmptyCall(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Periodic(ctx context.Context, opts ...grpc.CallOption) (Greeter_PeriodicClient, error)
	Syslog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) EmptyCall(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Greeter/EmptyCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Periodic(ctx context.Context, opts ...grpc.CallOption) (Greeter_PeriodicClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/Greeter/Periodic", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterPeriodicClient{stream}
	return x, nil
}

type Greeter_PeriodicClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterPeriodicClient struct {
	grpc.ClientStream
}

func (x *greeterPeriodicClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterPeriodicClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Syslog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/Greeter/Syslog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	EmptyCall(context.Context, *Empty) (*Empty, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Periodic(Greeter_PeriodicServer) error
	Syslog(context.Context, *LogEntry) (*HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_EmptyCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).EmptyCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/EmptyCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).EmptyCall(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Periodic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Periodic(&greeterPeriodicServer{stream})
}

type Greeter_PeriodicServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterPeriodicServer struct {
	grpc.ServerStream
}

func (x *greeterPeriodicServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterPeriodicServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_Syslog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Syslog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter/Syslog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Syslog(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyCall",
			Handler:    _Greeter_EmptyCall_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "Syslog",
			Handler:    _Greeter_Syslog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Periodic",
			Handler:       _Greeter_Periodic_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter.proto",
}

func init() { proto.RegisterFile("greeter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x14, 0x34, 0xea, 0xb6, 0xe9, 0xd3, 0xbd, 0xbc, 0x53, 0xad, 0x17, 0xc9, 0x41, 0x7a, 0x90, 0x20,
	0xfa, 0x09, 0xb2, 0xe8, 0x41, 0x44, 0xba, 0x78, 0x96, 0xa8, 0x8f, 0xb0, 0x90, 0x6e, 0x62, 0x12,
	0xc5, 0xfc, 0x8e, 0x5f, 0x6a, 0x37, 0xdb, 0xaa, 0x78, 0xf0, 0x94, 0x19, 0x98, 0x37, 0x33, 0x19,
	0x98, 0x6b, 0x4f, 0x14, 0xc9, 0x4b, 0xe7, 0x6d, 0xb4, 0xa2, 0x84, 0xd9, 0xa2, 0x77, 0x31, 0x09,
	0x01, 0x87, 0x37, 0x64, 0x8c, 0xed, 0xe8, 0xf5, 0x8d, 0x42, 0x44, 0x84, 0xfd, 0xb5, 0xea, 0xa9,
	0x66, 0x27, 0xac, 0xad, 0xba, 0x8c, 0xc5, 0x03, 0xf0, 0x5b, 0xab, 0x17, 0xeb, 0xe8, 0x13, 0x36,
	0xc0, 0x03, 0xbd, 0x93, 0x5f, 0xc5, 0x94, 0x35, 0xb3, 0xee, 0x9b, 0xe3, 0x11, 0x70, 0xe5, 0xdc,
	0x63, 0xbe, 0xdf, 0xcd, 0xf7, 0xe5, 0xc0, 0xef, 0x06, 0xba, 0xb1, 0x8d, 0xf4, 0x11, 0xeb, 0xbd,
	0xad, 0xed, 0x06, 0x8b, 0x53, 0x80, 0x31, 0xda, 0x99, 0x84, 0x35, 0x94, 0x3d, 0x85, 0xa0, 0xf4,
	0x94, 0x3d, 0xd1, 0x8b, 0x4f, 0x06, 0xe5, 0xf5, 0xb6, 0x3d, 0x1e, 0x43, 0x95, 0x7b, 0x5f, 0x29,
	0x63, 0xb0, 0x90, 0x19, 0x37, 0xe3, 0x8b, 0x2d, 0xf0, 0xa5, 0x4a, 0xd9, 0x13, 0xe7, 0xf2, 0xf7,
	0xb7, 0x9a, 0x03, 0xf9, 0x13, 0x25, 0x76, 0xf0, 0x0c, 0xf8, 0xfd, 0xd0, 0xd9, 0xbe, 0xac, 0x9e,
	0xff, 0x57, 0xb6, 0xec, 0x9c, 0xa1, 0x80, 0x62, 0x99, 0x82, 0xb1, 0x1a, 0x2b, 0x39, 0x0d, 0xf1,
	0x47, 0xf7, 0x54, 0xe4, 0x5d, 0x2f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xd7, 0x3a, 0xa0,
	0x68, 0x01, 0x00, 0x00,
}
